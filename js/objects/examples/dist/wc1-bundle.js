/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./wc1-entry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../parts/Background.js":
/*!******************************!*\
  !*** ../parts/Background.js ***!
  \******************************/
/*! exports provided: Background, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Background\", function() { return Background; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Background; });\n/* harmony import */ var _Card_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Card.js */ \"../parts/Card.js\");\n/**\n * Background\n * ------------------------------------\n * I am a Card-like part that represents a\n * background layer for a given card.\n * My direct owner is always a Stack.\n * Stacks can contain several Background parts.\n * Cards in a Stack pick which Background in the Stack\n * they wish to use. By default, Stacks are created with\n * a \"blank\" first Background, and any new Cards in\n * the Stack will be set to use this first Background.\n * I have all the capabilities of a Card.\n * In terms of message delegation, all Card Parts\n * delegate to the (current) Background they have.\n * I then delegate to the Stack that is my owner.\n */\n\n\nclass Background extends _Card_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(owner, name){\n        super(owner, name);\n    }\n\n    // Delegation override.\n    // I pass any untrapped command\n    // messages to my parent Stack\n    delegateMessage(aMessage){\n        this.sendMessage(\n            aMessage,\n            this.owner\n        );\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/Background.js?");

/***/ }),

/***/ "../parts/Button.js":
/*!**************************!*\
  !*** ../parts/Button.js ***!
  \**************************/
/*! exports provided: Button, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Button\", function() { return Button; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Button; });\n/* harmony import */ var _Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../properties/PartProperties.js */ \"../properties/PartProperties.js\");\n/**\n * Button\n * ----------------------------------\n * I am a Button Part.\n * My owner is always a Card.\n * I am a clickable point of interaction on a Card,\n * whose functionality can be customized by the author.\n */\n\n\n\nclass Button extends _Part_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(owner, name){\n        if(owner.type !== 'card'){\n            throw new Error(`Buttons can only be parts of Cards!`);\n        }\n        super(owner);\n\n        // If we are initializing with a name,\n        // set the name part property\n        if(name){\n            this.partProperties.setPropertyNamed(\n                this,\n                'name',\n                name\n            );\n        }\n\n        // Add Button-specific part properties\n        this.partProperties.newDynamicProp(\n            'selectedText',\n            null, // readOnly (for now)\n            this.getSelectedText,\n            true, // readOnly,\n            [] // no aliases\n        );\n\n        this.partProperties.newBasicProp(\n            'style',\n            'normal'\n        );\n        this.partProperties.newBasicProp(\n            'textAlign',\n            'center'\n        );\n        this.partProperties.newBasicProp(\n            'textFont',\n            'default'\n        );\n        this.partProperties.newBasicProp(\n            'textStyle',\n            'plain'\n        );\n        this.partProperties.newBasicProp(\n            'visible',\n            true\n        );\n        this.partProperties.newBasicProp(\n            'autoHilite',\n            true\n        );\n        this.partProperties.newBasicProp(\n            'hilite',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'iconAlign',\n            'center'\n        );\n        this.partProperties.newBasicProp(\n            'showName',\n            true\n        );\n    }\n\n    get type(){\n        return 'button';\n    }\n\n    // Delegation override.\n    // Buttons delegate passed or\n    // untrapped command messages\n    // to their owner card\n    delegateMessage(aMessage){\n        this.sendMessage(\n            aMessage,\n            this.owner\n        );\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/Button.js?");

/***/ }),

/***/ "../parts/Card.js":
/*!************************!*\
  !*** ../parts/Card.js ***!
  \************************/
/*! exports provided: Card, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Card\", function() { return Card; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Card; });\n/* harmony import */ var _Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../properties/PartProperties.js */ \"../properties/PartProperties.js\");\n/**\n * Card\n * --------------------------\n * I am a Card Part.\n * I represent a collection of Parts that is\n * displayed on the screen. My owner is always\n * a Stack Part.\n * I can contain any kind of Part, including\n * buttons and fields.\n */\n\n\n\nclass Card extends _Part_js__WEBPACK_IMPORTED_MODULE_0__[\"Part\"] {\n    constructor(owner, name){\n        if(owner.type != 'stack'){\n            throw new Error(`Cards can only be parts of Stacks!`);\n        }\n        super(owner);\n\n        // By default, a new Card's background\n        // is the first Background in it's owner Stack.\n        this.stack = this.owner;\n        this.currentBackground = this.stack.partsCollection.getPartByTypeIndex(\n            'background',\n            1\n        );\n\n        // Add Card-specific part\n        // properties\n        this.partProperties.newBasicProp(\n            'marked',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'cantDelete',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'dontSearch',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'showPict',\n            false\n        );\n\n        // If we are initializing with a name\n        // set the name property\n        if(name){\n            this.partProperties.setPropertyNamed(\n                this,\n                'name',\n                name\n            );\n        }\n    }\n\n    get type(){\n        return 'card';\n    }\n\n    // Override for delegation. Command messages\n    // that are passed or otherwise not handled\n    // by this card are delegated to the background\n    delegateMessage(aMessage){\n        this.sendMessage(\n            aMessage,\n            this.currentBackground\n        );\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/Card.js?");

/***/ }),

/***/ "../parts/Field.js":
/*!*************************!*\
  !*** ../parts/Field.js ***!
  \*************************/
/*! exports provided: Field, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Field\", function() { return Field; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Field; });\n/* harmony import */ var _Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../properties/PartProperties.js */ \"../properties/PartProperties.js\");\n/**\n * Field\n * -----------------------------------------\n * I am a Field Part.\n * I am a container that holds text. I also allow\n * a user to edit my text.\n */\n\n\n\nclass Field extends _Part_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(owner, name){\n        super(owner);\n        if(name){\n            this.partProperties.setPropertyNamed(\n                this,\n                'name',\n                name\n            );\n        }\n\n        // Set the Field-specific\n        // Part Properties\n        this.partProperties.newBasicProp(\n            'autoSelect',\n            false,\n        );\n        this.partProperties.newBasicProp(\n            'autoTab',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'lockText',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'showLines',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'dontWrap',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'multipleLines',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'scroll',\n            0\n        );\n        this.partProperties.newBasicProp(\n            'sharedText',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'wideMargins',\n            false\n        );\n    }\n\n    // Override delegation. Fields should\n    // delegate message handling to their\n    // owner cards.\n    delegateMessage(aMessage){\n        this.sendMessage(\n            aMessage,\n            this.owner\n        );\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/Field.js?");

/***/ }),

/***/ "../parts/Part.js":
/*!************************!*\
  !*** ../parts/Part.js ***!
  \************************/
/*! exports provided: Part, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Part\", function() { return Part; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Part; });\n/* harmony import */ var _PartCollection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PartCollection.js */ \"../parts/PartCollection.js\");\n/* harmony import */ var _utils_idMaker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/idMaker.js */ \"../utils/idMaker.js\");\n/* harmony import */ var _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../properties/PartProperties.js */ \"../properties/PartProperties.js\");\n/**\n * Part\n * -------------------------------\n * I represent the prototype object for all\n * SimpleTalk parts.\n */\n\n\n\n\n\n\nclass Part {\n    constructor(anOwnerPart){\n        this.partsCollection = new _PartCollection_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\n        this.partProperties = new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"PartProperties\"]();\n        this._owner = anOwnerPart;\n        this._commandHandlers = {};\n        this._functionHandlers = {};\n        this._propertySubscribers = new Set();\n\n        // Bind methods\n        this.setupProperties = this.setupProperties.bind(this);\n        this.getStack = this.getStack.bind(this);\n        this.numberInOwner = this.numberInOwner.bind(this);\n        this.setCmdHandler = this.setCmdHandler.bind(this);\n        this.setFuncHandler = this.setFuncHandler.bind(this);\n        this.receiveCmd = this.receiveCmd.bind(this);\n        this.receiveFunc = this.receiveFunc.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.delegateMessage = this.delegateMessage.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.addPropertySubscriber = this.addPropertySubscriber.bind(this);\n        this.removePropertySubscriber = this.removePropertySubscriber.bind(this);\n        this.serialize = this.serialize.bind(this);\n        this.setFromDeserialized = this.setFromDeserialized.bind(this);\n\n        // Finally, we finish initialization\n        this.setupProperties();\n    }\n\n    // Return the Stack in which this part is\n    // embedded. Involves a recursive lookup.\n    // If this part is itself a Stack, just\n    // return itself.\n    getStack(){\n        if(this.type == 'stack'){\n            return this;\n        }\n        if(this._owner == null){\n            return null;\n        }\n        return this._owner.getStack();\n    }\n\n    // Returns the index (ie, \"number\") of this part\n    // in its owner's collection of parts, and only\n    // the index in a collection of parts of the same\n    // type as me.\n    // In any collection, a part has two indicies:\n    // the index in a list of parts of the same type\n    // (ie, 'button 3 of card')\n    // and the index in a list of parts of all types\n    // (ie 'part 4 of card')\n    // This retrieves only the former.\n    numberInOwner(){\n        if(!this.owner){\n            return -1; // Per JS indexOf operations\n        }\n        return this.owner.partsCollection.getTypeIndexForPart(this);\n    }\n\n    // Configures the specific properties that the\n    // given part can expect, along with any default\n    // values.\n    // Descendant Parts should override this method\n    // in their own constructor after calling super,\n    // so that they get the parent's general properties\n    // too.\n    setupProperties(){\n        // Here, we set up properties common\n        // to ALL Parts in the system.\n        let basicProps = [\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'bottom',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'bottomRight',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'contents',\n                null,\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'enabled',\n                true\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'height',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'id',\n                _utils_idMaker_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].new()\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'left',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'location',\n                0,\n                false,\n                ['loc']\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'name',\n                ''\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'rectangle',\n                \"0, 0, 0, 0\",\n                true,\n                ['rect']\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'right',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'script',\n                null // For now\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'top',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'topLeft',\n                0\n            ),\n            new _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_2__[\"BasicProperty\"](\n                'width',\n                0\n            )\n        ];\n        basicProps.forEach(prop => {\n            this.partProperties.addProperty(prop);\n        });\n\n        this.partProperties.newDynamicProp(\n            'number',\n            null, // No setter; readOnly\n            function(propOwner, propObject){\n                    return propOwner.numberInOwner();\n                },\n                true, // Is readOnly,\n                [] // No aliases\n        );\n    }\n\n    /** Logging and Reporting **/\n    shouldBeImplemented(functionName){\n        let msg = `${this.constructor.name} should implement ${functionName}`;\n        throw new Error(msg);\n    }\n\n    /** Message Handling and Delegation **/\n    delegateMessage(aMessage){\n        return this.shouldBeImplemented('delegateMessage');\n    }\n\n    sendMessage(aMessage, target){\n        if(target){\n            target.receiveMessage(aMessage);\n        } else {\n            this.receiveMessage(aMessage);\n        }\n    }\n\n    receiveMessage(aMessage){\n        // By default, Parts will only handle\n        // messages of type 'command' and 'function'\n        switch(aMessage.type){\n        case 'command':\n            this.receiveCmd(aMessage);\n            break;\n        case 'function':\n            this.receiveFunc(aMessage);\n            break;\n        }\n    }\n\n    receiveCmd(aMessage){\n        let handler = this._commandHandlers[aMessage.commandName];\n\n        if(handler){\n            // If this Part has a handler for\n            // the given command, we run it.\n            // We also late-bind the current part\n            // instance as the 'this' context for\n            // the handler\n            let boundHandler = handler.bind(this);\n            boundHandler();\n        } else {\n            // Otherwise, we have no handler for\n            // it, so we delegate along the\n            // message delegation chain. It is up\n            // to Parts to properly implement delegation\n            // for themselves!\n            this.delegateMessage(aMessage);\n        }\n    }\n\n    receiveFunc(aMessage){\n        let handler = this._functionHandlers[aMessage.functionName];\n\n        if(handler){\n            let boundHandler = handler.bind(this);\n            boundHandler();\n        } else {\n            this.delegateMessage(aMessage);\n        }\n    }\n\n    setCmdHandler(commandName, handler){\n        this._commandHandlers[commandName] = handler;\n    }\n\n    setFuncHandler(funcName, handler){\n        this._functionHandlers[funcName] = handler;\n    }\n\n    /** Property Subscribers\n        ------------------------\n        Objects added as property subscribers\n        will be 'notified' whenever one of this\n        Part's properties changes\n    **/\n    addPropertySubscriber(anObject){\n        this._propertySubscribers.add(anObject);\n    }\n\n    removePropertySubscriber(anObject){\n        this._propertySubscribers.delete(anObject);\n    }\n\n    propertyChanged(propertyName, newValue){\n        let message = {\n            type: 'propertyChanged',\n            propertyName: propertyName,\n            value: newValue\n        };\n        this._propertySubscribers.forEach(subscriber => {\n            this.sendMessage(message, subscriber);\n        });\n    }\n\n    /**\n     * Serialize this Part's state as JSON.\n     * By default, we do not serialize specific\n     * PartCollection information (recursively),\n     * and only include basics including the current\n     * state of all properties.\n     */\n    serialize(){\n        let result = {\n            type: this.type,\n            id: this.id,\n            properties: {},\n            numParts: this.partsCollection.allParts.length,\n            ownerId: this._owner.id\n        };\n        this.partProperties._properties.forEach(prop => {\n            let name = prop.name;\n            let value = prop.getValue(this);\n            result.properties[name] = value;\n        });\n        return JSON.stringify(result, null, 4);\n    }\n\n    /**\n     * Set the properties and other\n     * attributes of this Part model\n     * from a deserialized JSON object.\n     */\n    setFromDeserialized(anObject){\n        // First, set all writeable properties\n        // to the incoming values\n        let incomingProps = anObject.properties;\n        Object.keys(incomingProps).forEach(propName => {\n            let property = this.partProperties.getPropertyNamed(this, propName);\n            if(!property){\n                throw new Error(`Invalid deserialized property: ${propName}`);\n            }\n            if(!property.readOnly){\n                // Last arg is false, which tells the property\n                // not to notify its owner's subscribers of\n                // property changes. We don't need that when\n                // deserializing\n                property.setValue(this, incomingProps[propName], false);\n            }\n        });\n\n        // Next, set the id based on the\n        // incoming value\n        this.id = anObject.id;\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/Part.js?");

/***/ }),

/***/ "../parts/PartCollection.js":
/*!**********************************!*\
  !*** ../parts/PartCollection.js ***!
  \**********************************/
/*! exports provided: PartCollection, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartCollection\", function() { return PartCollection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PartCollection; });\n/**\n * PartCollection\n * ---------------------------------\n * I represent a collection of parts that are\n * \"children\" of some parent part.\n * Parts can be referenced by a given property name,\n * the \"number\" of their kind within the parent\n * (ie, card button 3), the \"number\" of the part\n * of any kind within the parent (ie, card part 4)\n */\n\nclass PartCollection {\n    constructor(anOwnerPart){\n        this.allParts = [];\n        this.partsByType = {};\n        this.partsById = {};\n        this.partsByName = {};\n        this.owner = anOwnerPart;\n\n        // Bind methods\n        this.addPart = this.addPart.bind(this);\n        this.removePart = this.removePart.bind(this);\n        this.getPartById = this.getPartById.bind(this);\n        this.getPartByName = this.getPartByName.bind(this);\n        this.getPartByPartIndex = this.getPartByPartIndex.bind(this);\n        this.getPartByTypeIndex = this.getPartByTypeIndex.bind(this);\n        this.getTypeIndexForPart = this.getTypeIndexForPart.bind(this);\n    }\n\n    addPart(aPart){\n        // Find the list of parts for\n        // the incoming part type\n        let byTypeList = this.partsByType[aPart.type];\n        if(byTypeList){\n            byTypeList.push(aPart);\n        } else {\n            this.partsByType[aPart.type] = [aPart];\n        }\n\n        // Add the part to the total parts list\n        this.allParts.push(aPart);\n\n        // Add to parts by id\n        this.partsById[aPart.id] = aPart;\n\n        // Add to parts by name\n        if(aPart.name){\n            this.partsByName[aPart.name] = aPart;\n        }\n\n        // Set the part's owner to be the\n        // same as that of this PartCollection\n        aPart._owner = this.owner;\n    }\n\n    removePart(aPart){\n        // Remove from the byType structure,\n        // if present\n        let typeList = this.partsByType[aPart.type];\n        if(typeList){\n            let typePartIndex = typeList.indexOf(aPart);\n            if(typePartIndex >= 0){\n                typeList.splice(typePartIndex, 1);\n            }\n        }\n\n        // Remove from allParts, if present\n        let allPartsIndex = this.allParts.indexOf(aPart);\n        if(allPartsIndex >= 0){\n            this.allParts.splice(allPartsIndex, 1);\n        }\n\n        // Remove from by id dictionary\n        delete this.partsById[aPart.id];\n\n        // Remove from the by name dictionary\n        delete this.partsByName[aPart.name];\n    }\n\n    /**\n     * Various Get methods.\n     * TODO: Should these throw errors\n     * if not found, return -1, or return\n     * the result of the normal data structure\n     * lookup? We do the last option for now.\n    **/\n\n    getPartById(id){\n        return this.partsById[id];\n    }\n\n    getPartByName(aName){\n        return this.partsByName[aName];\n    }\n\n    getPartByTypeIndex(aType, anIndex){\n        let typeList = this.partsByType[aType];\n        if(typeList){\n            return typeList[anIndex - 1];\n        }\n        return undefined;\n    }\n\n    getTypeIndexForPart(aPart){\n        let typeList = this.partsByType[aPart.type];\n        if(typeList){\n\n            // Note that the expected values are\n            // 1-indexed (not 0-indexed) as this is\n            // what HyperTalk expects\n            return typeList.indexOf(aPart) + 1;\n        }\n        return -1;\n    }\n\n    getPartByPartIndex(anIndex){\n        // Note: this method expects\n        // 1-indexed values, ie 1 is the first\n        // in the subcollection, etc\n        return this.allParts[anIndex - 1];\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/PartCollection.js?");

/***/ }),

/***/ "../parts/Stack.js":
/*!*************************!*\
  !*** ../parts/Stack.js ***!
  \*************************/
/*! exports provided: Stack, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stack\", function() { return Stack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Stack; });\n/* harmony import */ var _Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _Card_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Card.js */ \"../parts/Card.js\");\n/* harmony import */ var _Background_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Background.js */ \"../parts/Background.js\");\n/* harmony import */ var _properties_PartProperties_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../properties/PartProperties.js */ \"../properties/PartProperties.js\");\n/**\n * Stack\n * ----------------------------\n * I am the Stack Part.\n * I represent a collection of Card parts,\n * along with some extra configurability.\n */\n\n\n\n\n\nclass Stack extends _Part_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(owner, name){\n        super(owner);\n\n        // Set up Stack specific\n        // PartProperties\n        this.partProperties.newBasicProp(\n            'cantPeek',\n            false\n        );\n        this.partProperties.newBasicProp(\n            'resizable',\n            false\n        );\n\n        // If we are initializing with a name,\n        // set the name property\n        if(name){\n            this.partProperties.setPropertyNamed(\n                this,\n                'name',\n                name\n            );\n        }\n\n        // We construct with an initial\n        // Background part, since there needs\n        // to be at least one\n        let initBackground = new _Background_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this);\n        this.partsCollection.addPart(\n            initBackground\n        );\n\n        // We create an initial Card, then\n        // set that to the current card.\n        this.currentCard = this.newCard();\n        this.currentCardIndex = this.currentCard.numberInOwner();\n\n        // Bound methods\n        this.newCard = this.newCard.bind(this);\n    }\n\n\n    newCard(cardName){\n        let card = new _Card_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, cardName);\n        this.partsCollection.addPart(card);\n    }\n\n    get type(){\n        return 'stack';\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/Stack.js?");

/***/ }),

/***/ "../parts/WorldStack.js":
/*!******************************!*\
  !*** ../parts/WorldStack.js ***!
  \******************************/
/*! exports provided: WorldStack, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorldStack\", function() { return WorldStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WorldStack; });\n/* harmony import */ var _Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _Card_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Card.js */ \"../parts/Card.js\");\n/* harmony import */ var _Field_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Field.js */ \"../parts/Field.js\");\n/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Stack.js */ \"../parts/Stack.js\");\n/* harmony import */ var _Background_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Background.js */ \"../parts/Background.js\");\n/* harmony import */ var _Button_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Button.js */ \"../parts/Button.js\");\n/**\n * WorldStack\n * ---------------------------------------------------\n * I am a Stack part that represents the root of a\n * hierarchy of parts. I am the end of the ownership\n * chain for any given configuration of Parts.\n * I am also the final resolver of all unhandled\n * messages sent along the delegation chain for parts.\n * All parts can eventually resolve to me via the delegation\n * chain or ownership hierarchy.\n * There should only be one instance of me in any given\n * SimpleTalk environment.\n */\n\n\n\n\n\n\n\nclass WorldStack extends _Part_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(){\n        super(null);\n\n        // loadedStacks is a simple array\n        // of Stack parts that this WorldStack\n        // knows about.\n        this.loadedStacks = [];\n\n        // The currentStack is the\n        // stack that should be currently displayed.\n        this.currentStack = null;\n    }\n\n    get type(){\n        return 'world';\n    }\n\n    // Override for delegation.\n    // Because this is the root in the chain,\n    // any messages sent for delegation will\n    // be treated as messages that the system\n    // does not understand. For now, we throw an\n    // error\n    delegateMessage(aMessage){\n        throw new Error(`Our World does not understand this message: ${aMessage}`);\n    }\n};\n\n\n/**\n * Constructs the appropriate Part based\n * on the incoming serialization string, which\n * should be JSON valid\n */\nWorldStack.fromSerialization = function(aString){\n    let json = JSON.parse(aString);\n    let newPart = null;\n    switch(json.type){\n    case 'stack':\n        newPart = new _Stack_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n    case 'card':\n        newPart = new _Card_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    case 'background':\n        newPart = new _Background_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    case 'button':\n        newPart = new _Button_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n    case 'field':\n        newPart = new _Field_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    }\n\n    if(!newPart){\n        throw new Error(`Could not deserialize: type ${json.type} is not a valid part!`);\n    }\n\n    newPart.setFromDeserialized(json);\n};\n\n\n\n\n//# sourceURL=webpack:///../parts/WorldStack.js?");

/***/ }),

/***/ "../properties/PartProperties.js":
/*!***************************************!*\
  !*** ../properties/PartProperties.js ***!
  \***************************************/
/*! exports provided: PartProperties, BasicProperty, DynamicProperty, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartProperties\", function() { return PartProperties; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicProperty\", function() { return BasicProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DynamicProperty\", function() { return DynamicProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PartProperties; });\n/**\n * PartProperties\n * ------------------------------------\n * I am an object representing the base\n * Part Properties for all Parts.\n * I also include some convenience methods\n * on my prototype that should be used by\n * other Parts when they inherit from me.\n * For now, we use Object.create() for inheritance.\n */\n\nclass BasicProperty {\n    constructor(name, defaultValue, readOnly=false, aliases=[]){\n        this.name = name;\n        this._value = defaultValue;\n        this.readOnly = readOnly;\n        this.aliases = aliases;\n\n        // Bound methods\n        this.getValue = this.getValue.bind(this);\n        this.setValue = this.setValue.bind(this);\n        this.hasAlias = this.hasAlias.bind(this);\n        this.matches = this.matches.bind(this);\n        this.matchesNameOrAlias = this.matchesNameOrAlias.bind(this);\n    }\n\n    // For basic properties, we return\n    // the set/stored value\n    getValue(owner){\n        return this._value;\n    }\n\n    // For the basic properties, we set\n    // based on the incoming desired value\n    // alone (nothing is computed)\n    setValue(owner, val, notify=true){\n        if(!this.readOnly){\n            this._value = val;\n            if(notify){\n                owner.propertyChanged(\n                    this.name,\n                    val\n                );\n            }\n        }\n    }\n\n    // Returns true if this property\n    // goes by the given alias\n    hasAlias(anAlias){\n        return this.aliases.includes(anAlias);\n    }\n\n    // Returns true if the given name is\n    // either an alias or the exact name\n    // for this property\n    matchesNameOrAlias(aNameOrAlias){\n        if(this.hasAlias(aNameOrAlias)){\n            return true;\n        } else if(aNameOrAlias == this.name){\n            return true;\n        }\n        return false;\n    }\n\n    // Returns true if the incoming Property\n    // has the same name and/or one of the same\n    // aliases as this Property\n    matches(aProperty){\n        if(aProperty.name == this.name){\n            return true;\n        } else {\n            for(let i = 0; i < this.aliases.length; i++){\n                let myAlias = this.aliases[i];\n                if(aProperty.hasAlias(myAlias)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n\nclass DynamicProperty extends BasicProperty {\n    constructor(name, setter, getter, readOnly=false, aliases=[]){\n        super(name, null, readOnly, aliases);\n        this.valueSetter = setter;\n        this.valueGetter = getter;\n    }\n\n    // In this override, we use the getter\n    // if available, to dynamically get the\n    // incoming value.\n    getValue(owner){\n        return this.valueGetter(owner, this);\n    }\n\n    // In this override, we use the setter\n    // if available, to dynamically set the\n    // incoming value\n    setValue(owner, val, notify=true){\n        if(!this.readOnly){\n            this.valueSetter(owner, this, val);\n            if(notify){\n                owner.propertyChanged(\n                    this.name,\n                    val\n                );\n            }\n        }\n    }\n};\n\nclass PartProperties {\n    constructor(){\n        this._properties = [];\n\n        // Bound methods\n        this.hasProperty = this.hasProperty.bind(this);\n        this.addProperty = this.addProperty.bind(this);\n        this.removeProperty = this.removeProperty.bind(this);\n        this.findPropertyNamed = this.findPropertyNamed.bind(this);\n        this.setPropertyNamed = this.setPropertyNamed.bind(this);\n        this.getPropertyNamed = this.getPropertyNamed.bind(this);\n        this.newBasicProp = this.newBasicProp.bind(this);\n        this.newDynamicProp = this.newDynamicProp.bind(this);\n        this._indexOfProperty = this._indexOfProperty.bind(this);\n    }\n\n    // This collection 'has' a property if it contains\n    // a Property object with matching name or alias\n    // of the incoming property.\n    hasProperty(aProperty){\n        for(let i = 0; i < this._properties.length; i++){\n            let prop = this._properties[i];\n            if(aProperty.matches(prop)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Find one of my Properties by\n    // a name or alias. Returns null\n    // if no match found. Perhaps we should\n    // throw an error\n    findPropertyNamed(aName){\n        for(let i = 0; i < this._properties.length; i++){\n            let prop = this._properties[i];\n            if(prop.matchesNameOrAlias(aName)){\n                return prop;\n            }\n        }\n        return null;\n    }\n\n    // Attempts to get the *value* of the property\n    // with the given name or alias.\n    // If the property is not found, we throw an\n    // error\n    getPropertyNamed(owner, aName){\n        let found = this.findPropertyNamed(aName);\n        if(!found){\n            throw new Error(`${owner} does not have property \"${aName}\"`);\n        }\n        return found.getValue(owner);\n    }\n\n    // Attempts to set the *value* of the property\n    // with the given name or alias.\n    // If the property is not found, we throw an\n    // error\n    setPropertyNamed(owner, aName, aValue){\n        let found = this.findPropertyNamed(aName);\n        if(!found){\n            throw new Error(`${owner} does not have property \"${aName}\"`);\n        }\n        return found.setValue(owner, aValue);\n    }\n\n    // If you add a property with a name or alias\n    // that is already present in the collection,\n    // then we 'overwrite' it by removing the exising\n    // property and replacing it with the incoming one.\n    // Otherwise, we just add the property\n    addProperty(aProperty){\n        if(this.hasProperty(aProperty)){\n            this.removeProperty(aProperty);\n        }\n        this._properties.push(aProperty);\n    }\n\n    // Removing a property here means removing\n    // it from the stored array. If the property\n    // is not in the array, we do NOT throw an error.\n    // We just go on with our lives, because who cares?\n    removeProperty(aProperty){\n        let propIndex = this._indexOfProperty(aProperty);\n        if(propIndex >= 0){\n            this._properties.splice(propIndex, 1);\n\n        }\n    }\n\n    // Convenience method for creating a new basic\n    // property.\n    newBasicProp(...args){\n        let newPeop = new BasicProperty(...args);\n        this.addProperty(newProp);\n    }\n\n    // Convenience method for creating a new\n    // dynamic prop\n    newDynamicProp(...args){\n        let newProp = new DynamicProperty(...args);\n        this.addProperty(newProp);\n    }\n\n    // Private method. Finds the first occurring\n    // index of the given Property in the array\n    // of properties in this collection. Returns\n    // -1 if not found, per JS implementation.\n    _indexOfProperty(aProperty){\n        for(let i = 0; this._properties.length; i++){\n            let prop = this._properties[i];\n            if(aProperty.matches(prop)){\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../properties/PartProperties.js?");

/***/ }),

/***/ "../utils/idMaker.js":
/*!***************************!*\
  !*** ../utils/idMaker.js ***!
  \***************************/
/*! exports provided: idMaker, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"idMaker\", function() { return idMaker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return idMaker; });\n/**\n * ID Maker\n * ------------------------------------\n * I am responsible for creating globally\n * unique ID values for Parts in the SimpleTalk\n * world.\n * HC requires that all Parts have unique ids and\n * that these should not be repeated in any given\n * \"application\" instance.\n * We need to determine what an \"application\" is\n * in our context, but regardless we can use this\n * module as a drop in replacement, implementing\n * UUIDs or URLs or whatever we want.\n * For now we just increment an integer.\n */\nconst idMaker = {\n    count: -1, // Will be incremented to 0 on first use\n    new: function(){\n        this.count = this.count + 1;\n        return this.count;\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../utils/idMaker.js?");

/***/ }),

/***/ "../views/PartView.js":
/*!****************************!*\
  !*** ../views/PartView.js ***!
  \****************************/
/*! exports provided: PartView, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PartView\", function() { return PartView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PartView; });\n/* harmony import */ var _parts_Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parts/Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _parts_WorldStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parts/WorldStack.js */ \"../parts/WorldStack.js\");\n/**\n * PartView\n * ----------------------------------------\n * I am an *abstract* webcompoent CustomElement\n * that serves as the generic view for any Part\n * models.\n * I should not be instantiated directly, nor should\n * I be added to any web page's registry of CustomElements.\n * I am indended to be extended (subclassed) by the actual\n * views for each Part kind, and therefore I contain all\n * of the common behavior, including lifecycle methods,\n * for these.\n */\n\n\n\nclass PartView extends HTMLElement {\n    constructor(){\n        super();\n        this.model = null;\n\n        // Bind component methods\n        this.setModel = this.setModel.bind(this);\n        this.unsetModel = this.unsetModel.bind(this);\n        this.getModelFromSerialized = this.getModelFromSerialized.bind(this);\n        this.registerInParentView = this.registerInParentView.bind(this);\n        this.initSerializedElement = this.initSerializedElement.bind(this);\n        this.updateSerializationScript = this.updateSerializationScript.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n    }\n\n    /**\n     * The following will be handled for all PartViews\n     */\n    connectedCallback(){\n        if(this.isConnected){\n            console.log(`PartView[${this.id}] connected`);\n            this.querySelectorAll('part-view').forEach(found => {\n                console.log('DING!');\n            });\n            if(this.parentElement.tagName == 'PART-VIEW'){\n                console.log('Connected to a parent PartView');\n            }\n            this.getModelFromSerialized();\n            this.registerInParentView();\n            this.initSerializedElement();\n        }\n    }\n\n    setModel(newModel){\n        if(this.model){\n            this.unsetModel(this.model);\n        }\n        this.model = newModel;\n\n        // Add this view to the list of the model's\n        // property subscribers, so we can react to\n        // property changes as needed\n        newModel.addPropertySubscriber(this);\n\n        // Set the content of the script\n        // serialization element to be the\n        // serialized state of the new model\n        this.initSerializedElement();\n    }\n\n    unsetModel(aModel){\n        // Just in case, remove this View\n        // from the model's propertySubscribers\n        aModel.removePropertySubscriber(this);\n        this.model = null;\n\n        // Clear the script element containing\n        // the serialized state of the model\n        this.serializationScriptEl.innerHTML = \"\";\n    }\n\n    /**\n     * like Parts, Views can receive messages.\n     * Here we check to see if a message concerns\n     * a change in a value of one of the model's\n     * properties\n     */\n    receiveMessage(aMessage){\n        switch(aMessage.type){\n        case 'propertyChanged':\n            this.updateSerializationScript();\n            if(this.onPropertyChanged){\n                this.onPropertyChanged(\n                    aMessage.propertyName,\n                    aMessage.newValue\n                );\n            }\n            return;\n        default:\n            return;\n        }\n    }\n\n\n    /**\n     * Designed to be used in any connectedCallback.\n     * Will attempt to add the model of the incoming\n     * view to this view model's partsCollection.\n     */\n    registerInParentView(){\n        if(this.parentElement.isPartView && this.parentElement.model){\n            this.parentElement.model.partCollection.addPart(this.model);\n        }\n    }\n\n    /**\n     * This method will read a child <script> tag (if present)\n     * and create a Part model from the contained JSON of its\n     * serialized state.\n     * The script tag has to be of type application/json\n     * and should be a *basic* serialization of the Part model\n     * without any PartCollection information. The child Parts will\n     * be deduced from any nested views, which will also call this\n     * method on themselves\n     */\n    getModelFromSerialized(){\n        let jsonScriptElement = this.querySelector('script[type=\"application/json\"]');\n        if(jsonScriptElement){\n            let newModel = _parts_WorldStack_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fromSerialization(jsonScriptElement.innerHTML);\n            this.model = newModel;\n        }\n    }\n\n    /**\n     * Ensure that there is a child <script> element present that\n     * can be used to store serialization information. We update the\n     * JSON contents of this script whenever one of the props or\n     * other values changes in the Part.\n     * If it is already present, then we are loading or have loaded\n     * from a deserialization, so all we need to do is set it as\n     * a JS property\n     */\n    initSerializedElement(){\n        let found = this.querySelector('script[data-role=\"part-serialization\"]');\n        if(found){\n            this.serializationScriptEl = found;\n        } else {\n            this.serializationScriptEl = document.createElement('script');\n            this.serializationScriptEl.setAttribute('data-role', 'part-serialization');\n            this.serializationScriptEl.setAttribute('type', 'application/json');\n        }\n        this.updateSerializationScript();\n\n        // If the element is not one of this element's\n        // children yet, append it.\n        this.append(this.serializationScriptEl);\n    }\n\n    /**\n     * Update the text contents of the serialization script\n     * element. Here we simply serialize the model and then\n     * replace all of the text content in the script tag\n     */\n    updateSerializationScript(){\n        if(this.model){\n            let content = this.model.serialize();\n            this.serializationScriptEl.innerHTML = content;\n        }\n    }\n};\n\n\n\n\n//# sourceURL=webpack:///../views/PartView.js?");

/***/ }),

/***/ "./wc1-entry.js":
/*!**********************!*\
  !*** ./wc1-entry.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parts_Part_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parts/Part.js */ \"../parts/Part.js\");\n/* harmony import */ var _views_PartView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/PartView.js */ \"../views/PartView.js\");\n/**\n * Entrypoint for WC1 Example for Webpack\n */\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.PartView = _views_PartView_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    window.Part = _parts_Part_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n    window.customElements.define('part-view', _views_PartView_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n    // Do some initial action, ie make a Part instance\n    // and then set it as the model for the existing\n    // PartView element.\n    let main = document.getElementById('main-view');\n    let myModel = new _parts_Part_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    myModel._owner = myModel; // For now all parts need owners\n    main.setModel(myModel);\n    window.myModel = myModel;\n});\n\n\n//# sourceURL=webpack:///./wc1-entry.js?");

/***/ })

/******/ });